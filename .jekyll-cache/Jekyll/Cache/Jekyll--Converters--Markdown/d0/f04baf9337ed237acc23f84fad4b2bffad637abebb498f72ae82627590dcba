I"¡!<p>This tutorial will help you set environment variables for a particular user.  An excellent example of this is mapping your /home/$user/bin to the $PATH variable, allowing the user to execute scripts from the /home/$user/bin from any terminal.  Using the /home/$user/bin method is more convenient during development rather than soley copying files over to the /usr/bin folder.  Whenever $user is specified in this tutorial, feel free to replace it with your username.
<strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong></p>

<div style="text-align: center;"><span style="background-color: #ff0000; color: #ffffff;">First, ensure you have created a bin folder inside of your home folder.</span></div>

<p>Edit the .bashrc file in your home folder; open a terminal and type the following.</p>

<p>nano .bashrc</p>

<p>Add the following line of code to your .bashrc file; this will map your ~/bin folder to the $PATH variable.</p>

<p>export PATH=$HOME/bin:$PATH</p>

<p>Sample output of mine:</p>

<div style="height: 200px; width: 900px; border: 1px solid #cccccc; font-style: normal; font-variant: normal; font-weight: normal; line-height: 26px; font-size-adjust: none; font-stretch: normal; overflow: auto;">
<div class="sites-codeblock sites-codesnippet-block">
<code>## ~/.bashrc## If not running interactively, don't do anything[[ $- != *i* ]] &amp;&amp; return</code><br />
<br />
alias ls='ls --color=auto'&lt;/code&gt;<br />
<br />
<code>PS1='[\u@\h \W]\$ '</code><br />
<br />
<code>export PATH=$HOME/bin:$PATH</code><br />
</div>
</div>

<p>Lets say the drive you want to install to is /dev/sda. You would want to write random data to this drive if it is a HDD. This will destroy all data.</p>

<p>Code:</p>

<p><code>dd if=/dev/urandom of=/dev/sda bs=512</code></p>

<p>The block size should be equal to your physical sector size for greatest performance when running this command. Be patient because this could potentially take hours depending on processor performance, disk size, and disk write speeds.</p>

<p>If you are using an SSD you will kill its performance by writing random data to it this way. Instead you should zero out the drive.</p>

<div style="text-align: center;"><span style="background-color: #ff0000; color: #ffffff;">Note: This could potentially expose what type of filesytem that resides in the encrypted container to an attacker.</span></div>

<p>Code:</p>

<p><code>dd if=/dev/zero of=/dev/sda bs=512</code></p>

<p>The next step is to partition the disk. There are many programs that you use to do this. I assume you know how so I won‚Äôt go into great detail here. Create two primary partitions on the drive. Make the first one 256 MB. The second one will take the rest of the drive up.</p>

<p>You should now have two partitions on the drive. Format the 256 MB partition. This partition will be made for /boot.</p>

<p>Code:</p>

<p><code>mkfs.ext4 /dev/sda1</code></p>

<p>Next I am going to show how to make an encrypted volume. Set a passphrase that is super secure. I recommend using a short password with a yubikey static password. You can get a yubikey <a href="https://www.yubico.com/" target="_blank">here</a>.</p>

<p>Code:</p>

<p><code>cryptsetup -y -s 512 -c aes-xts-plain luksFormat /dev/sda2</code></p>

<p>For drives larger than 2 TB you should use aes-xts-plain64.</p>

<p>Now that you have an encrypted volume you must open this volume and give it a device mapper name.</p>

<p>Code:</p>

<p><code>cryptsetup luksOpen /dev/sda2 encrypted</code></p>

<p>If you want to be able to create more than one partition inside of your encrypted volume you will want to create an LVM. I will show how to create a partition for a 20GB root and the rest for /home. I will also show you how to format the new logical volumes.</p>

<p>Code:</p>

<p><code>pvcreate /dev/mapper/encrypted</code></p>

<p><code>vgcreate vg_name /dev/mapper/encrypted</code></p>

<p><code>lvcreate -n root -L 20G vg_name</code></p>

<p><code>lvcreate -n home -l 100%FREE vg_name</code></p>

<p><code>vgchange -ay<code></code></code></p>

<p><code>mkfs.ext4 /dev/mapper/vg_name-root</code></p>

<p><code>mkfs.ext4 /dev/mapper/vg_name-home</code></p>

<p>From this point you would go about the Arch install, following the <a href="https://wiki.archlinux.org/title/Installation_guide" target="_blank">Arch Installation Guide</a>, with a few modifications that I will show. It is import that we tell the kernel where the root partition is and what parititon must be unlocked.</p>

<p>Code:</p>

<p><code>blkid /dev/sda2</code></p>

<p>The output should be something like the following. I have highlighted the important part.</p>

<p>Code:</p>

<p><code>/dev/sda2: UUID="<span style="background-color: #ff9900;">99ed413f-a4d1-48e5-bdcb-63a5ed351787</span>" TYPE="crypto_LUKS"</code></p>

<p>Next you need to modify the file /etc/default/grub. Change the line that says GRUB_CMDLINE_LINUX=‚Äù‚Äù to the following if you are using a HDD.</p>

<p>Code:</p>

<p><code>GRUB_CMDLINE_LINUX="cryptdevice=/dev/disk/by-uuid/99ed413f-a4d1-48e5-bdcb-63a5ed351787:encrypted root=/dev/mapper/vg_name-root ro"</code></p>

<p>Also make sure that the line GRUB_DISABLE_LINUX_UUID=true is commeted out.</p>

<p>If you are using an SSD you need to change GRUB_CMDLINE_LINUX=‚Äù‚Äù to the following line in order for trim to work properly.</p>

<p>Code:</p>

<p><code>GRUB_CMDLINE_LINUX="cryptdevice=/dev/disk/by-uuid/99ed413f-a4d1-48e5-bdcb-63a5ed351787:encrypted:allow-discards
root=/dev/mapper/vg_name-root ro"</code></p>

<p>Also make sure that the line GRUB_DISABLE_LINUX_UUID=true is commeted out.</p>

<p>Next you need to modify your /etc/mkinitcpio.conf file. Change the HOOKS array to look like the following.</p>

<p>Code:</p>

<p><code>HOOKS="base udev autodetect pata scsi sata encrypt lvm2 filesystems usbinput fsck"</code></p>

<p>Then create an initramfs with the following command.</p>

<p>Code:</p>

<p><code>mkinitcpio -p linux</code></p>

<p>Then generate your grub.cfg file with this command.</p>

<p>Code:</p>

<p><code>grub-mkconfig -o /boot/grub/grub.cfg</code></p>

<p>Lastly make sure that your /etc/fstab is correct. It should look something like this if you have a HDD.</p>

<p>Code:</p>

<div style="height: 200px; width: 900px; border: 1px solid #cccccc; font-style: normal; font-variant: normal; font-weight: normal; line-height: 26px; font-size-adjust: none; font-stretch: normal; overflow: auto; text-align: left;">
<div class="sites-codeblock sites-codesnippet-block">
<p><code># /etc/fstab: static file system information</code><code>#</code><code># &lt;file system&gt; &lt;dir&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</code><code>tmpfs           /tmp    tmpfs   nodev,nosuid    0       0</code><code>/dev/mapper/vg_name-root        /               ext4            rw,data=ordered 0 0</code></p>
<p><code># UUID=2bac00da-6283-45ab-8ba4-bed8d943218b</code></p>
<p><code>/dev/mapper/vg_name-home        /home           ext4            rw,data=ordered 0 0</code></p>
<p><code># UUID=61386444-0a37-4453-82db-64c803306b7e /dev/sda1</code></p>
<p><code>/dev/disk/by-uuid/61386444-0a37-4453-82db-64c803306b7e                  /boot           ext4            rw,data=ordered       0 0</code></p>
</div>
</div>

<p>If you have a SSD it should look like this.</p>

<div style="height: 200px; width: 900px; border: 1px solid #cccccc; font-style: normal; font-variant: normal; font-weight: normal; line-height: 26px; font-size-adjust: none; font-stretch: normal; overflow: auto; text-align: left;">
<div class="sites-codeblock sites-codesnippet-block">
<p><code># /etc/fstab: static file system information</code><code>#</code><code># &lt;file system&gt; &lt;dir&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</code><code>tmpfs           /tmp    tmpfs   nodev,nosuid    0       0</code><code>/dev/mapper/vg_name-root        /               ext4            rw,noatime,discard,data=ordered 0 0</code></p>
<p><code># UUID=2bac00da-6283-45ab-8ba4-bed8d943218b</code></p>
<p><code>/dev/mapper/vg_name-home        /home           ext4            rw,</code><code><code>noatime,discard,</code>data=ordered 0 0</code></p>
<p><code># UUID=61386444-0a37-4453-82db-64c803306b7e /dev/sda1</code></p>
<p><code>/dev/disk/by-uuid/61386444-0a37-4453-82db-64c803306b7e                  /boot           ext4            rw,noatime,discard,data=ordered       0 0</code></p>
</div>
</div>

<p>If everything has gone correctly you should be able to reboot and will be prompted for your passphrase to unlock your encrypted drive.</p>
:ET